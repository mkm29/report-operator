/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/tools/record"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	reportv1alpha1 "github.com/mkm29/report-operator/api/v1alpha1"
	"github.com/mkm29/report-operator/pkg/aws"
)

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Scheme   *runtime.Scheme
	Recorder record.EventRecorder
}

//+kubebuilder:rbac:groups=aquasecurity.github.io,resources=vulnerabilityreports,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=aquasecurity.github.io,resources=vulnerabilityreports/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=aquasecurity.github.io,resources=vulnerabilityreports/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the VulnerabilityReport object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.13.0/pkg/reconcile
func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)
	log.Info("Reconciling VulnerabilityReport")

	// 1. Fetch the VulnerabilityReport instance
	report := &reportv1alpha1.VulnerabilityReport{}
	err := r.Get(ctx, req.NamespacedName, report)
	if err != nil {
		log.Error(err, "unable to fetch VulnerabilityReport")
		return ctrl.Result{Requeue: true}, client.IgnoreNotFound(err)
	}
	// check if report has already been processed (will be true)
	if report.Report.Processed {
		fmt.Printf("Report has already been processed")
		return ctrl.Result{}, nil
	}

	// print report name
	log.Info(fmt.Sprintf("Processing Report %s in namespace %s", report.Name, report.Namespace))

	// 2. Transform the VulnerabilityReport into a JSON file to be stored in S3
	// marshal the report into a JSON file
	jsonReport, err := json.MarshalIndent(report, "", " ")
	if err != nil {
		log.Error(err, "unable to marshall VulnerabilityReport")
		return ctrl.Result{Requeue: true}, err
	}

	// 3. Check if the VulnerabilityReport instance is marked to be deleted, which is
	// 		indicated by the deletion timestamp being set.

	// 4. Run finalizer logic for VulnerabilityReport. If the finalizer logic fails, don't
	// 		remove the finalizer so that we can retry during the next reconciliation.

	// 5. Mark the VulnerabilityReport instance to be deleted

	// create AWS client
	awsclient := &aws.AWSClient{}
	awsclient.Init()
	fullname := report.Report.Artifact.Repository
	imageName := fullname[strings.LastIndex(fullname, "/")+1:]
	key := fmt.Sprintf("%s/%s:%s.json", report.Namespace, imageName, report.Report.Artifact.Tag)
	fmt.Printf("Uploading report with key %s", key)
	err = awsclient.Upload(key, jsonReport)
	if err != nil {
		log.Error(err, "unable to upload report to S3")
		return ctrl.Result{Requeue: true}, err
	}

	// 6. Update the VulnerabilityReport instance, setting the status to 'Processed'
	report.Report.Processed = true
	// 7. Save the VulnerabilityReport instance
	err = r.Update(ctx, report)
	if err != nil {
		log.Error(err, "unable to update VulnerabilityReport")
		return ctrl.Result{Requeue: true}, err
	}
	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&reportv1alpha1.VulnerabilityReport{}).
		Complete(r)
}

func (r *VulnerabilityReportReconciler) doFinalizerOperationsForReport(report *reportv1alpha1.VulnerabilityReport) {
	// TODO(user): Add the cleanup steps that the operator
	// needs to do before the CR can be deleted. Examples
	// of finalizers include performing backups and deleting
	// resources that are not owned by this CR, like a PVC.

	// Note: It is not recommended to use finalizers with the purpose of delete resources which are
	// created and managed in the reconciliation. These ones, such as the Deployment created on this reconcile,
	// are defined as depended of the custom resource. See that we use the method ctrl.SetControllerReference.
	// to set the ownerRef which means that the Deployment will be deleted by the Kubernetes API.
	// More info: https://kubernetes.io/docs/tasks/administer-cluster/use-cascading-deletion/

	// The following implementation will raise an event
	r.Recorder.Event(report, "Warning", "Deleting",
		fmt.Sprintf("Custom Resource %s is being deleted from the namespace %s",
			report.Name,
			report.Namespace))
}
